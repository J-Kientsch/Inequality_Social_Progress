---
title: "Untitled"
format: html
---

---
    title: "Global Inequality and Social Progress"
    author: "Jacky K | 2025-04-05"
    format:
    html:
        self-contained: true
        theme:
        light: cosmo
        dark: darkly
        toc: true           # include a table of contents
        toc-location: left  # place the table of contents on the left
        code-fold: true     # allow code folding for a cleaner look
    fig-width: 12
    fig-height: 7
 ---

    This report explores global inequality and social progress using multiple indicators from Gapminder (https://www.gapminder.org). By examining indicators such as the Human Development Index (HDI), Gini Coefficient, Poverty Rate, Access to Education, and Life Expectancy, we reveal insights into social progress and the distribution of wealth and opportunity worldwide.

    ```{python echo:False}

    # Load libraries
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns
    import plotly.express as px
    import country_converter as cc
    from itables import show, init_notebook_mode

    # Initialize interactive tables (useful for Jupyter environments)
    init_notebook_mode(all_interactive=True)
    ```

    For the following analysis and visualizations, the datasets are subsetted to 5 countries of interest and only datapoints ranging from 1975to 2024 (last 50 years) are taken into account. 

    ```{python echo:False}
    import geopandas as gpd
import matplotlib.pyplot as plt

# Load the built-in Natural Earth dataset with low-resolution geometry.
world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))

# Define a list of selected countries.
selected_countries = ["Switzerland", "Canada", "Ghana", "Japan", "India"]

# Create a GeoDataFrame for the selected countries.
selected = world[world['name'].isin(selected_countries)]

# Create a figure and axis for plotting.
fig, ax = plt.subplots(figsize=(12, 7))

# Plot the entire world map in a neutral color.
world.plot(ax=ax, color='lightgrey', edgecolor='white')

# Plot the selected countries on top in a distinct color.
selected.plot(ax=ax, color='crimson', edgecolor='black')

# Add a title and remove axis for a cleaner look.
ax.set_title("World Map Highlighting Selected Countries", fontsize=16, fontweight="bold")
ax.set_axis_off()

# Display the static map.
plt.tight_layout()
plt.show()

    ```

    ```{python echo:False}


    # Import the data and subset it
    # # Select Countries and Years 1975-2024
    # --------------------------------------------------

    def subset_by_country_and_year(df, start_year=1975, end_year=2024):
        """
        Subset a DataFrame by the first column (country names) for the selected countries
        and the columns (years) that lie within start_year and end_year (inclusive).
        """
        country_col = df.columns[0]
        # Select columns that represent years
        selected_years = [col for col in df.columns[1:] if col.isdigit() and start_year <= int(col) <= end_year]
        return df[df[country_col].isin(selected_countries)][[country_col] + selected_years]

    # Import raw datasets
    life_exp_raw   = pd.read_csv("data/lex.csv")
    hdi_raw        = pd.read_csv("data/hdi_human_development_index.csv")
    gini_raw       = pd.read_csv("data/si_pov_gini.csv")
    poverty_raw    = pd.read_csv("data/gm_685pov_num.csv")
    education_raw  = pd.read_csv("data/owid_education_idx.csv")

    # Print basic shape info for each raw dataset
    print("Life Expectancy Data Shape:", life_exp_raw.shape)
    print("HDI Data Shape:", hdi_raw.shape)
    print("Gini Data Shape:", gini_raw.shape)
    print("Poverty Data Shape:", poverty_raw.shape)
    print("Education Data Shape:", education_raw.shape)

    # Subset each dataset to the selected countries and the period 1975-2024
    life_exp_data  = subset_by_country_and_year(life_exp_raw)
    hdi_data       = subset_by_country_and_year(hdi_raw)
    gini_data      = subset_by_country_and_year(gini_raw)
    poverty_data   = subset_by_country_and_year(poverty_raw)
    education_data = subset_by_country_and_year(education_raw)

    # Check the life expectancy subset as an example
    print(life_exp_data.head())


    ```

    ```{python echo:False}
    # Time Series Function

    def plot_time_series(df, indicator, y_label=None, title=None):
        """
        Plots a time series line chart for a given indicator.
        
        Parameters:
        df: DataFrame in wide format with 'country' as the first column.
        indicator: The indicator name (string) to plot; this is the name used when melting.
        y_label: The label for the y-axis (optional).
        title: The title for the plot (optional).
        """
        country_col = df.columns[0]
        # Melt the DataFrame from wide to long format
        df_long = df.melt(id_vars=country_col, var_name="year", value_name=indicator)
        df_long["year"] = df_long["year"].astype(int)
        
        if y_label is None:
            y_label = indicator
        if title is None:
            title = f"{indicator} Trends (1975-2024)"
        
        # Set seaborn theme and use a colorblind-friendly palette
        palette = sns.color_palette("colorblind", n_colors=df_long[country_col].nunique())
        sns.set_theme(style="whitegrid", palette=palette)
        
        plt.figure(figsize=(12, 7))
        ax = sns.lineplot(
            data=df_long,
            x="year",
            y=indicator,
            hue=country_col,
            marker="o",
            linewidth=2.5,
            markersize=10
        )
        
        ax.set_title(title, fontsize=16, fontweight="bold", pad=20)
        ax.set_xlabel("Year", fontsize=14)
        ax.set_ylabel(y_label, fontsize=14)
        ax.legend(title=country_col, fontsize=12, title_fontsize=13, loc="upper left")
        ax.tick_params(axis="both", which="major", labelsize=12)
        
        # Annotate final data points for each country
        for country in df_long[country_col].unique():
            sub = df_long[df_long[country_col] == country]
            final = sub[sub["year"] == sub["year"].max()]
            if not final.empty:
                x_val = final["year"].values[0]
                y_val = final[indicator].values[0]
                ax.text(x_val, y_val, f" {country}", fontsize=10, verticalalignment="center")
        
        sns.despine(trim=True)
        plt.tight_layout()
        return ax
    ```


    ## Global Social Progress
    This section analyzes key social progress indicators, namely **Life Expectancy** and **Human Development Index (HDI)**.

    ### Life Expectancy Trends 
    #### Time Series 
    The following line chart shows Life Expectancy trends from 1975to 2024 for the selected countries.

    ```{python echo:False}

    plot_time_series(life_exp_data, "Life Expectancy", y_label="Life Expectancy", title="Life Expectancy Trends (since 1975)")
    plt.show()
    ```

    ### Human Development Index
    #### Time Series

    ```{python echo:False}
    plot_time_series(hdi_data, "Human Development Index [HDI]", y_label="HDI", title="HDI Trends (since 1975)")
    plt.show()

    ```

    #### Heatmap 

    ```{python echo:False}
    def heatmap_improved(df, value_label="HDI", title="HDI Heatmap (1975-2024)"):
        """
        Creates a heatmap for the specified indicator across time and country.
        """
        country_col = df.columns[0]
        df_long = df.melt(id_vars=country_col, var_name="year", value_name=value_label)
        df_long["year"] = df_long["year"].astype(int)
        pivot_df = df_long.pivot(index="year", columns=country_col, values=value_label)
        
        plt.figure(figsize=(12, 8))
        ax = sns.heatmap(
            pivot_df,
            cmap="coolwarm",
            annot=True,
            fmt=".3f",
            linewidths=0.3,
            annot_kws={"fontsize":8}
        )
        ax.set_title(title, fontsize=16, fontweight="bold", pad=12)
        ax.set_xlabel("Country", fontsize=14)
        ax.set_ylabel("Year", fontsize=14)
        plt.tight_layout()
        return ax

    # Display the HDI heatmap
    heatmap_improved(hdi_data, value_label="HDI", title="HDI Heatmap (1975-2024)")
    plt.show()

    ```

    #### Violin Plot by Decade 

    ```{python echo:False}
    def faceted_violin_hdi_improved(df, value_label="HDI", title="HDI Distribution by Decade (Faceted by Country)"):
        """
        Creates faceted violin plots to show the distribution of HDI by decade for each country.
        """
        country_col = df.columns[0]
        df_long = df.melt(id_vars=country_col, var_name="year", value_name=value_label)
        df_long["year"] = df_long["year"].astype(int)
        # Create a 'decade' column from the year
        df_long["decade"] = (df_long["year"] // 10) * 10
        
        sns.set_theme(style="whitegrid", palette="Set2")
        g = sns.FacetGrid(df_long, col=country_col, col_wrap=3, height=4, aspect=1)
        g.map_dataframe(sns.violinplot, x="decade", y=value_label, inner=None, color="lightgray", width=0.8)
        # Overlay boxplot information and jittered points for quartile details
        g.map_dataframe(sns.boxplot, x="decade", y=value_label, width=0.2, showcaps=True,
                        boxprops={'facecolor':'None'}, showfliers=False, whiskerprops={'linewidth':2})
        g.map_dataframe(sns.stripplot, x="decade", y=value_label, color="black", alpha=0.5, jitter=True)
        g.set_axis_labels("Decade", value_label)
        g.set_titles("{col_name}")
        g.fig.suptitle(title, y=1.05, fontsize=16, fontweight="bold")
        plt.tight_layout()
        return g

    # Display the faceted violin plot for HDI
    faceted_violin_hdi_improved(hdi_data, value_label="HDI", title="HDI Distribution by Decade (Faceted by Country)")
    plt.show()

    ```

    ## Inequality Measures 
    This section examines inequality-related indicators such as the **Gini Coefficient**, **Poverty Rate**, and Access to Education.
    ### GINI Coefficient 
    The Gini coefficient is a widely used measure of income inequality. It ranges from 0 to 1, where:

    0 represents perfect equality (everyone has the same income), and

    1 represents perfect inequality (all income is earned by a single individual).

    In the context of this report, the Gini coefficient is important because it provides a quantitative measure of how evenly or unevenly income or wealth is distributed among the population. This metric is critical when assessing global inequality and social progress, as higher inequality (a higher Gini coefficient) can correlate with various social challenges, while lower inequality suggests a more equitable distribution of resources. Comparing the Gini coefficient with other indicators like HDI and life expectancy can help us understand how economic disparities might influence overall human development and well-being.

    #### Quick Summary Table by Decade 
    First, we have a quick look at the GINI coefficient by decade. The results are displayed in the table below.
    The selected benchmark years are 1980, 2000, and 2024. 
    - 1980: Represents a period of significant global economic shifts and early market liberalizations.
    - 2000: Captures the turn of the millennium, reflecting changes in technology and globalization.
    - 2024: Provides the most recent data, showing current levels of inequality.

    ```{python echo:False}
    def create_gini_decade_summary_styled(df, value_label="Gini Coefficient"):
        country_col = df.columns[0]
        df_long = df.melt(id_vars=country_col, var_name="year", value_name=value_label)
        df_long["year"] = df_long["year"].astype(int)
        df_long = df_long[df_long["year"] >= 1975]
        df_long = df_long.dropna(subset=[value_label])
        df_long["decade"] = df_long["year"].apply(
            lambda y: "1960s (1963–1969)" if 1963 <= y < 1970 else f"{(y // 10) * 10}s"
        )
        summary = df_long.groupby([country_col, "decade"])[value_label].agg(
            Mean="mean",
            Minimum="min",
            Maximum="max"
        ).reset_index()
        summary["Mean"] = summary["Mean"].round(3)
        summary["Minimum"] = summary["Minimum"].round(3)
        summary["Maximum"] = summary["Maximum"].round(3)
        
        # Apply styling: zebra striping and highlight min/max
        styled = summary.style.apply(lambda x: ['background: #f9f9f9' if i % 2 else 'background: #ffffff' for i in range(len(x))], axis=0)\
                                .highlight_min(subset=["Minimum"], color='light blue')\
                                .highlight_max(subset=["Maximum"], color='salmon')
        return styled

    # Generate and display the styled Gini summary table
    gini_decade_summary_styled = create_gini_decade_summary_styled(gini_data, value_label="Gini Coefficient")
    # For interactive environments:
    from itables import show
    show(gini_decade_summary_styled)
    ```

    #### GINI Time Series Plot

    ```{python echo:False}
    plot_time_series(gini_data, "GINI Coefficient", y_label="GINI Coefficient", title="GINI CoefficientTrends (since 1975)")
    plt.show()
    ```

    ### Poverty Rate
    #### Time Series 

    ```{python echo:False}
    ax = plot_time_series(poverty_data, "Poverty Rate", y_label="Poverty Rate", title="Poverty Rate Trends (since 1975)")
    # from matplotlib.ticker import MaxNLocator
    # ax.yaxis.set_major_locator(MaxNLocator(20))

    plt.show()

    ```

    ##Relationships and Trends 
    In this section, we combine the previously explored indicators to investigate how they relate to one another. Specifically, we look at:
    Correlation Analysis among the indicators.

    ```{python echo:False}
    # create a merged dataset in long format

    # Helper function: Melt each dataset without filtering to benchmarks
    def melt_indicator(df, indicator_name):
        country_col = df.columns[0]
        df_long = df.melt(id_vars=country_col, var_name="Year", value_name=indicator_name)
        # Keep only rows where Year is numeric
        df_long = df_long[df_long["Year"].str.isdigit()]
        # Convert Year to int
        df_long["Year"] = df_long["Year"].astype(int)
        return df_long

    # Melt each indicator into long format (no filtering yet)
    life_exp_long   = melt_indicator(life_exp_data, "Life Expectancy")
    hdi_long        = melt_indicator(hdi_data, "HDI")
    gini_long_bm    = melt_indicator(gini_data, "Gini Coefficient")
    poverty_long    = melt_indicator(poverty_data, "Poverty Rate")
    education_long  = melt_indicator(education_data, "Education Index")

    # Merge datasets on Country and Year using 'outer' to keep all rows
    merged_long = (
        life_exp_long
        .merge(hdi_long,        on=["country", "Year"], how="outer")
        .merge(gini_long_bm,    on=["country", "Year"], how="outer")
        .merge(poverty_long,    on=["country", "Year"], how="outer")
        .merge(education_long,  on=["country", "Year"], how="outer")
    )
    ```


    ```{python echo:False}
    def correlation_heatmap(df, indicators=None, title="Correlation Heatmap of Social Progress Indicators"):
        """
        Calculates and displays a correlation heatmap for a list of numeric indicators.
        """
        # If no indicators are specified, select numeric columns (excluding 'year')
        if not indicators:
            numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
            numeric_cols = [col for col in numeric_cols if col.lower() != "year"]
            indicators = numeric_cols
        
        # Create a copy and convert each indicator column to numeric, coercing errors to NaN
        df_numeric = df.copy()
        for col in indicators:
            df_numeric[col] = pd.to_numeric(df_numeric[col], errors='coerce')
        
        # Drop rows where all indicators are NaN
        corr_df = df_numeric[indicators].dropna(how="all")
        
        # Calculate the correlation matrix
        corr_matrix = corr_df.corr()
        
        plt.figure(figsize=(8, 6))
        sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f", square=True, linewidths=0.5)
        plt.title(title, fontsize=14, fontweight="bold", pad=12)
        plt.tight_layout()
        plt.show()
    # Define the indicator list for the correlation analysis
    indicator_list = ["Life Expectancy", "HDI", "Gini Coefficient", "Poverty Rate", "Education Index"]

    correlation_heatmap(merged_long, indicators=indicator_list, 
                        title="Correlation Heatmap of Social Progress Indicators (Benchmark Years)")
    ```

    --------------------------------------------------
    # 5. Additional Individual Index Analyses Suggestions
    # --------------------------------------------------
    # For further analysis, consider:
    # - Creating moving average (rolling mean) overlays for smoother trend visualization (e.g., for Life Expectancy)
    # - Scatter plots comparing HDI versus Gini Coefficient or Poverty Rate to directly explore inverse relationships.
    # - Histograms or density plots to assess the distribution of the Education Index in early vs. recent years.
    # - Dual-axis plots to overlay related indicators (e.g., HDI and Education Index) on the same time series chart.
    #
    # Example: Calculate and plot a 5-year rolling average for Life Expectancy


    ```{python}
    def plot_rolling_average(df, indicator, window=5):
        country_col = df.columns[0]
        df_long = df.melt(id_vars=country_col, var_name="year", value_name=indicator)
        df_long["year"] = df_long["year"].astype(int)
        df_long.sort_values("year", inplace=True)
        
        plt.figure(figsize=(12, 7))
        ax = sns.lineplot(
            data=df_long,
            x="year",
            y=indicator,
            hue=country_col,
            marker="o",
            linewidth=2,
            legend="full"
        )
        
        # Compute and plot rolling average for each country
        for country in df_long[country_col].unique():
            sub = df_long[df_long[country_col] == country]
            sub = sub.sort_values("year")
            # Calculate the rolling mean (window=5 years)
            sub["rolling_mean"] = sub[indicator].rolling(window=window, min_periods=1).mean()
            plt.plot(sub["year"], sub["rolling_mean"], linestyle="--", label=f"{country} {indicator} (Rolling Avg)")
        
        ax.set_title(f"{indicator} Trends with {window}-Year Rolling Average (1975-2024)", fontsize=16, fontweight="bold", pad=20)
        ax.set_xlabel("Year", fontsize=14)
        ax.set_ylabel(indicator, fontsize=14)
        plt.legend(title=country_col, bbox_to_anchor=(1.05, 1), loc="upper left")
        plt.tight_layout()
        plt.show()

    # Example usage for Life Expectancy rolling average
    plot_rolling_average(life_exp_data, "Life Expectancy", window=5)

    ```